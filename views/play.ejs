<!doctype html>
<html>

<head>
    <meta charset="utf-8">
    <title>BetYourDignity</title>
    <style>
        body {
            background: #000000;
            padding: 0px;
            margin: 0px;
        }

        canvas {
            display: block;
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>

<body>
    <div id="phaser-example"></div>

    <script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();
        window.onload = function () {
            window.focus()
            resize();
            window.addEventListener("resize", resize, false);
        }

        var config = {
            type: Phaser.AUTO,
            width: 800,
            height: 600,
            physics: {
                default: 'arcade',
                arcade: {
                    // debug: true,
                    gravity: { y: 600 }
                },
            },
            audio: {
                // disableWebAudio: true
            },
            backgroundColor: '#2d2d2d',
            scene: {
                preload: preload,
                create: create,
                update: update,
                extend: {
                    bullets: null,
                    lastFired: 0
                }
            }
        };

        var game = new Phaser.Game(config);
        var player1, player2, cursor, bullets, group;
        var leftHearts, rightHearts;
        var leftScore, rightScore;
        var curPlayerDirection1, curPlayerDirection2;
        var that, sprite, platforms, shieldActive;

        function preload() {
            that = this;
            this.load.image('A', '/assetsMini/<%= hostBiene %>.png');
            this.load.image('B', '/assetsMini/<%= visitorBiene %>.png');
            this.load.image('heart', 'corazon.png');
            this.load.image('back', 'back.png');
            this.load.image('menu', 'menu.png');
            this.load.image('platform', 'platform.png');
            this.load.audio('bgAudio', ['sounds/bg.ogg', 'sounds/bg.mp3']);
            this.load.audio('shootAudio', ['sounds/shoot.mp3']);
            this.load.audio('dieAudio', ['sounds/muerte.mp3']);
            this.load.spritesheet('heal', 'healAnimation.png', { frameWidth: 192, frameHeight: 192 });
        }

        function create() {

            var config = {
                key: 'heal',
                frames: this.anims.generateFrameNumbers('heal'),
                frameRate: 60,
                repeat: 0
            };

            sprite = this.add.sprite(-200, -200, 'heal').setScale(0.8, 1);
            sprite.frame = 20;
            var anim = this.anims.create(config);

            that = this;
            this.sound.add('bgAudio').play({
                loop: true
            });

            // Create players
            cursors = this.input.keyboard.createCursorKeys();
            // this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);

            group = this.physics.add.group({
                bounceX: true,
                bounceY: false,
                collideWorldBounds: true,
                collide: true,
            });

            var fondo = this.add.tileSprite(600, 400, 0, 0, 'back').setScale(0.8);
            fondo.alpha = 0.25;

            var menu = this.add.tileSprite(400, 60, 0, 0, 'menu');


            player1 = group.create(200, 200, "A");
            player2 = group.create(600, 550, "B");

            player1.body.setSize(50, 80, 25, 30);
            player2.body.setSize(50, 80, 25, 30);

            // player1.body.immovable = true;
            player2.body.immovable = true;


            this.physics.add.collider(group, group);

            // Create hearts
            leftHearts = this.add.group({
                key: 'heart',
                frameQuantity: 5,
                setScale: {
                    x: 2,
                    y: 2
                },
                setXY: {
                    x: 45,
                    y: 65,
                    stepX: 40
                }
            });

            rightHearts = this.add.group({
                key: 'heart',
                frameQuantity: 5,
                setScale: {
                    x: 2,
                    y: 2
                },
                setXY: {
                    x: 600,
                    y: 65,
                    stepX: 40
                }
            });

            // Textos
            leftScore = this.add.text(30, 25, '<%= hostName %>', {
                fontSize: '32px',
                fill: '#FFF',
                fontFamily: "Segoe UI, Arial",
                shadowColor: "#111",
            });
            leftScore.setShadow(2, 2, 'rgba(0,0,0,0.5)', 5);
            leftScore.setOrigin(0, 0.5);

            rightScore = this.add.text(800 - 30, 25, '<%= visitorName %>', {
                fontSize: '32px',
                fill: '#FFF',
                fontFamily: "Segoe UI, Arial",
                shadowColor: "#111",
                textAlign: "right"
            });
            rightScore.setShadow(2, 2, 'rgba(0,0,0,0.5)', 5);
            rightScore.setOrigin(1, 0.5);

            /* Bullets */

            var Bullet = new Phaser.Class({

                Extends: Phaser.GameObjects.Image,

                initialize:

                    function Bullet(scene) {
                        Phaser.GameObjects.Image.call(this, scene, 0, 0, 'bullet');
                        this.speed = 0;
                        this.born = 0;
                        //console.log(this);
                    },

                fire: function (player) {
                    //console.log(game);
                    this.setPosition(player.x, player.y);
                    if (player === player1 && curPlayerDirection1) this.speed = Phaser.Math.GetSpeed(1000, 1);
                    else if (player === player2 && curPlayerDirection2) this.speed = Phaser.Math.GetSpeed(1000, 1);
                    else this.speed = Phaser.Math.GetSpeed(-1000, 1);
                    this.body.allowGravity = false;
                    this.born = 0;
                },

                update: function (time, delta) {
                    this.x += this.speed * delta;
                    this.born += delta;

                    if (this.born > 1000) {
                        this.setActive(false);
                        this.setVisible(false);
                    }
                }

            });

            bullets = this.physics.add.group({
                classType: Bullet,
                runChildUpdate: true,
                collide: true,
                collideWorldBounds: true,
            });

            //console.log(this);

            platforms = this.physics.add.group({
                allowGravity: false,
                immovable: true
            });
            platforms.create(400, 500 - 35, 'platform').setOrigin(0.5, 1);
            platforms.create(600, 300 + 15, 'platform').setOrigin(0.5, 1);
            platforms.create(200, 300 + 15, 'platform').setOrigin(0.5, 1);

            platforms.add(menu);

            this.physics.add.collider(group, platforms);

            shieldButton = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);

        }

        function update(time) {
            sprite.setPosition(<%= currPlayer %>.getCenter().x, <%= currPlayer %>.getCenter().y - 30);

            if (cursors.left.isDown) {
                socket.emit('move', { action: 'horizontal', dir: -200 });
                <%= currPlayer %>.setVelocityX(-200);
                if (<%= currPlayer %> === player1) curPlayerDirection1 = false;
                if (<%= currPlayer %> === player2) curPlayerDirection2 = false;
            } else if (cursors.right.isDown) {
                socket.emit('move', { action: 'horizontal', dir: 200 });
                <%= currPlayer %>.setVelocityX(200);
                if (<%= currPlayer %> === player1) curPlayerDirection1 = true;
                if (<%= currPlayer %> === player2) curPlayerDirection2 = true;
            } else {
                socket.emit('move', { action: 'horizontal', dir: 0 });
                <%= currPlayer %>.setVelocityX(0);
            }

            if (cursors.up.isDown && (<%= currPlayer %>.body.onFloor() || <%= currPlayer %>.body.touching.down)) {
                socket.emit('move', { action: 'vertical', dir: -600 });
                <%= currPlayer %>.setVelocityY(-600);
            }

            // Activar/Desactivar escut (shieldActive <- IMPORTANT)
            if (shieldButton.isDown) {
                shieldActive = true;
                if (!sprite.anims.isPlaying) {
                    sprite.anims.load('heal');
                    sprite.anims.play('heal');
                }
            }
            else shieldActive = false;

            if (cursors.space.isDown && time > this.lastFired) {
                playerFire(<%= currPlayer %>, this, true);
            }

            function playerFire(player, dis, emit) {
                var bullet = bullets.get();
                bullet.setActive(true);
                bullet.setVisible(true);

                if (bullet) {
                    if (emit) socket.emit('fire');
                    dis.physics.add.collider(bullet, notCurrentPlayer(), mycollisionHandler);
                    dis.physics.add.collider(bullet, platforms, handlerDestroyer);
                    dis.sound.add('shootAudio').play();
                    bullet.fire(player);
                    dis.lastFired = time + 300;
                }
            }

            function middleWare(player, emit) {
                playerFire(player, this, emit);
            }

            socket.on('fire', function () {
                middleWare(notCurrentPlayer(), false);
            })

            socket.on('move', function (data) {
                if (data.action === 'horizontal') {
                    if (data.player == 1) {
                        player1.setVelocityX(data.dir);
                        curPlayerDirection1 = data.dir >= 0;
                    } else if (data.player == 2) {
                        player2.setVelocityX(data.dir);
                        curPlayerDirection2 = data.dir >= 0;
                    }
                } else if (data.action === 'vertical') {
                    if (data.player == 1) player1.setVelocityY(data.dir);
                    else if (data.player == 2) player2.setVelocityY(data.dir);
                }
            });

        }

        function handlerDestroyer(a, b) {
            a.destroy();
        }

        function mycollisionHandler(bullet, group) {

            var actual = <%= currPlayer %>;
            if (actual === player1) {
                var vidasRestantes = rightHearts.children.entries.length;

                if (vidasRestantes > 0) {
                    that.sound.add('dieAudio').play();
                    rightHearts.children.entries[0].destroy();
                    --vidasRestantes;
                }

                if (vidasRestantes === 0) {
                    alert("hey, has ganao pavo, player1");
                }

            } else if (actual === player2) {
                var vidasRestantes = leftHearts.children.entries.length;

                if (vidasRestantes > 0) {
                    that.sound.add('dieAudio').play();
                    leftHearts.children.entries[vidasRestantes - 1].destroy();
                    --vidasRestantes;
                }

                if (vidasRestantes === 0) {
                    alert("hey, has ganao pavo, player2");
                }

            }
            bullet.destroy();
        }

        function notCurrentPlayer() {
            if (<%= currPlayer %> === player1) return player2;
            else return player1;
        }

        function resize() {
            var canvas = document.querySelector("canvas");
            var windowWidth = window.innerWidth;
            var windowHeight = window.innerHeight;
            var windowRatio = windowWidth / windowHeight;
            var gameRatio = game.config.width / game.config.height;
            if (windowRatio < gameRatio) {
                canvas.style.width = windowWidth + "px";
                canvas.style.height = (windowWidth / gameRatio) + "px";
            }
            else {
                canvas.style.width = (windowHeight * gameRatio) + "px";
                canvas.style.height = windowHeight + "px";
            }
        }


    </script>
</body>